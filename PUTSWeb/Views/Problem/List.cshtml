<link rel="stylesheet" href="~/css/list.css" />

@model PaginatedList<Problem>
@using Microsoft.AspNetCore.Mvc.Localization
@using PUTSWeb.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["Problems"];
}
@section scripts
    {
    <script src="~/js/list.js"></script>
}
<partial name="DeletionModal" />

<div id="Title">
    <h1>@Localizer["Problems"]</h1>

    @if (User.IsInRole("Admin"))
    {
        <a class="btn btn-success" asp-action="Create">@Localizer["New problem"]</a>
    }

    <form asp-controller="Problem" asp-action="List" method="get" class="form-inline">
        <input type="hidden" name="sortString" value="@ViewData["CurrentSort"]" />
        <div class="input-group">
            @if (!string.IsNullOrEmpty((string)ViewData["CurrentSearchString"]))
            {
                <input type="text" class="form-control" placeholder=@Localizer["Search"].Value name="searchString" autocomplete="off" value="@ViewData["CurrentSearchString"]">
            }
            else
            {
                <input type="text" class="form-control" placeholder=@Localizer["Search"].Value name="searchString" autocomplete="off">
            }

            <div class="input-group-btn">
                <button class="btn btn-default" type="submit">
                    <i class="glyphicon glyphicon-search"></i>
                </button>
            </div>
        </div>
    </form>
</div>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <!-- Column names -->

            <th scope="col" class="col-sm-1 centered-text">
                <a asp-action="List"
                   asp-route-sortString="@ViewData["IDSort"]"
                   asp-route-currentSearchString="@ViewData["CurrentSearchString"]">
                    ID
                </a>
            </th>

            <th scope="col">
                <a asp-action="List"
                   asp-route-sortString="@ViewData["NameSort"]"
                   asp-route-currentSearchString="@ViewData["CurrentSearchString"]">
                    @Localizer["Name"]
                </a>
            </th>

            <th scope="col" class="col-sm-1 centered-text"></th>

            <th scope="col" class="col-sm-1 centered-text">
                <a asp-action="List"
                   asp-route-sortString="@ViewData["SolvedSort"]"
                   asp-route-currentSearchString="@ViewData["CurrentSearchString"]">
                    @Localizer["Solved"]
                </a>
            </th>

            <th scope="col" class="col-sm-1 centered-text">
                <a asp-action="List"
                   asp-route-sortString="@ViewData["DateSort"]"
                   asp-route-currentSearchString="@ViewData["CurrentSearchString"]">
                    @Localizer["Added"]
                </a>
            </th>

            @if (User.IsInRole("Admin"))
            {
                <th scope="col" class="col-sm-2 text-right">@Localizer["Settings"]</th>
            }
        </tr>
    </thead>
    <tbody>
        @{
            foreach (Problem p in Model)
            {
                <tr>
                    <td class="centered-text">@p.ProblemID</td>
                    <td>
                        <a asp-action="Solve" asp-route-id="@p.ProblemID">@p.Name</a>
                        @if (!string.IsNullOrWhiteSpace(p.Tags))
                        {
                            foreach (string tag in p.Tags.Split(","))
                            {
                                if (!string.IsNullOrWhiteSpace(tag))
                                {
                                <a asp-action="List"
                                   asp-route-currentSearchString="@tag.Trim()"
                                    class="label label-default">
                                   @tag.Trim()
                                </a>
                                }
                            }
                        }
                    </td>
                        

                    @{
                        ApplicationUser partialUser = await UserManager.GetUserAsync(User);
                        ApplicationUser currentUser = await UserManager.Users
                                                                .Include(u => u.ProblemResults)
                                                                    .ThenInclude(r => r.FirstResult)
                                                                .Include(u => u.ProblemResults)
                                                                    .ThenInclude(r => r.BestResult)
                                                                .FirstOrDefaultAsync(u => u == partialUser);
                        bool hasSolved = currentUser.ProblemResults.Exists(r => r.ProblemID == p.ProblemID);
                    }

                    <td class="centered-text">
                        @if (hasSolved)
                        {
                            ProblemResult problemResult = currentUser.ProblemResults.First(r => r.ProblemID == p.ProblemID);
                            @if (problemResult.BestResult.PercentageResult == 0)
                            {
                                <span class="label label-danger">@problemResult.BestResult.PercentageResult%</span>
                            }
                            else if (problemResult.BestResult.PercentageResult < 100)
                            {
                                <span class="label label-warning">@problemResult.BestResult.PercentageResult%</span>
                            }
                            else
                            {
                                <span class="label label-success">@problemResult.BestResult.PercentageResult%</span>
                            }
                        }
                    </td>

                    <td class="centered-text">@p.TimesSolved</td>
                    <td class="centered-text">@p.AddedDate.ToShortDateString()</td>

                    @if (User.IsInRole("Admin"))
                    {
                        <td>
                            <div class="btn-group">
                                <a asp-action="Edit" asp-route-id="@p.ProblemID" class="btn btn-warning">@Localizer["Edit"]</a>
                                <button data-id=@p.ProblemID type="button" class="btn btn-danger" data-toggle="modal" data-target="#deletionModal">@Localizer["Delete"]</button>
                            </div>
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

@if (Model.HasPreviousPage)
{
    <a asp-action="List"
       asp-route-sortString="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentSearchString="@ViewData["CurrentSearchString"]"
       class="btn btn-default">
        @Localizer["Previous"]
    </a>
}

@if (Model.HasNextPage)
{
    <a asp-action="List"
       asp-route-sortString="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentSearchString="@ViewData["CurrentSearchString"]"
       class="btn btn-default">
        @Localizer["Next"]
    </a>
}