// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PUTSWeb;

namespace PUTSWeb.Migrations
{
    [DbContext(typeof(ProblemDbContext))]
    partial class ProblemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PUTSWeb.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Group");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PUTSWeb.Models.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Author");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("BlogID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("PUTSWeb.Models.Example", b =>
                {
                    b.Property<int>("ExampleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExpectedOutput")
                        .IsRequired();

                    b.Property<string>("Explanation");

                    b.Property<string>("GivenInput");

                    b.Property<int?>("ProblemID")
                        .IsRequired();

                    b.HasKey("ExampleID");

                    b.HasIndex("ProblemID");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("PUTSWeb.Models.Problem", b =>
                {
                    b.Property<int>("ProblemID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Author");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("InputDescription")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OutputDescription")
                        .IsRequired();

                    b.Property<bool>("ShowFailedTestCases");

                    b.Property<string>("Tags");

                    b.Property<int>("TimesSolved");

                    b.HasKey("ProblemID");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("PUTSWeb.Models.ProblemResult", b =>
                {
                    b.Property<int>("ProblemResultID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int?>("BestResultProgramResultID");

                    b.Property<int?>("FirstResultProgramResultID");

                    b.Property<int>("ProblemID");

                    b.HasKey("ProblemResultID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BestResultProgramResultID");

                    b.HasIndex("FirstResultProgramResultID");

                    b.ToTable("ProblemResult");
                });

            modelBuilder.Entity("PUTSWeb.Models.ProgramResult", b =>
                {
                    b.Property<int>("ProgramResultID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PassedTests");

                    b.Property<int>("PercentageResult");

                    b.Property<int>("ProblemID");

                    b.Property<int>("TestCount");

                    b.HasKey("ProgramResultID");

                    b.ToTable("ProgramResult");
                });

            modelBuilder.Entity("PUTSWeb.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExpectedOutput")
                        .IsRequired();

                    b.Property<string>("GivenInput");

                    b.Property<int?>("ProblemID")
                        .IsRequired();

                    b.HasKey("TestID");

                    b.HasIndex("ProblemID");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PUTSWeb.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PUTSWeb.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PUTSWeb.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PUTSWeb.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PUTSWeb.Models.Example", b =>
                {
                    b.HasOne("PUTSWeb.Models.Problem", "Problem")
                        .WithMany("Examples")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PUTSWeb.Models.ProblemResult", b =>
                {
                    b.HasOne("PUTSWeb.Areas.Identity.Data.ApplicationUser")
                        .WithMany("ProblemResults")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PUTSWeb.Models.ProgramResult", "BestResult")
                        .WithMany()
                        .HasForeignKey("BestResultProgramResultID");

                    b.HasOne("PUTSWeb.Models.ProgramResult", "FirstResult")
                        .WithMany()
                        .HasForeignKey("FirstResultProgramResultID");
                });

            modelBuilder.Entity("PUTSWeb.Models.Test", b =>
                {
                    b.HasOne("PUTSWeb.Models.Problem", "Problem")
                        .WithMany("Tests")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
